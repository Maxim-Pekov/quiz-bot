import os
import re
import json
import redis
import random
import logging

import vk_api as vk
from time import sleep
from dotenv import load_dotenv
from logs_handler import TelegramLogsHandler
from fetch_questions import fetch_random_questions
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor


logger = logging.getLogger(__name__)
exception_logger = logging.getLogger('exception_logger')


def start(event, vk_api, keyboard):
    """Send a  greeting message."""
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.')

    greetings = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! \n–Ø –±–æ—Ç –∑–∞–¥–∞—é—â–∏–π ' \
                '–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. \n–ù—É —á—Ç–æ –ø–æ–∏–≥—Ä–∞–µ–º? üé≤.'

    vk_api.messages.send(
        user_id=event.user_id,
        message=greetings,
        keyboard=keyboard.get_keyboard(),
        random_id=random.randint(1, 1000)
    )


def ask_question(event, vk_api, keyboard, redis_client):
    user_id = event.user_id

    quiz_question = fetch_random_questions()
    question = re.sub(r'–í–æ–ø—Ä–æ—Å \d+:\s+', '', quiz_question[0])
    answer = re.sub(r'–û—Ç–≤–µ—Ç:\s+', '', quiz_question[1])

    redis_client.set(f'{user_id}_question', json.dumps(question))
    redis_client.set(f'{user_id}_answer', json.dumps(answer))

    question = json.loads(redis_client.get(f'{user_id}_question'))

    logger.info(f'question--->{question}, \nanswer--->{answer}')

    question_text = f'–í–Ω–∏–º–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å: \n\n{question}'

    vk_api.messages.send(
        user_id=event.user_id,
        message=question_text,
        keyboard=keyboard.get_keyboard(),
        random_id=random.randint(1, 1000)
    )


def check_answer(event, vk_api, keyboard, redis_client):
    user_id = event.user_id
    answer = json.loads(redis_client.get(f'{chat_id}_answer')).split('.')[0]
    lower_answer = answer.lower()

    if event.text.lower() == lower_answer:
        try:
            total_score = json.loads(redis_client.get(f'{user_id}_score'))
        except TypeError:
            total_score = 0
        redis_client.set(f'{user_id}_score', total_score + 1)
        bot_answer = '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–∂–º–∏ ' \
                     '¬´–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å¬ª'
    else:
        bot_answer = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ‚Ä¶ –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë —Ä–∞–∑?'

    vk_api.messages.send(
        user_id=event.user_id,
        message=bot_answer,
        keyboard=keyboard.get_keyboard(),
        random_id=random.randint(1, 1000)
    )


def show_answer(event, vk_api, keyboard, redis_client):
    user_id = event.user_id
    answer = json.loads(redis_client.get(f'{user_id}_answer'))
    bot_answer = f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç \n\n{answer}\n\n"
    vk_api.messages.send(
        user_id=event.user_id,
        message=bot_answer,
        keyboard=keyboard.get_keyboard(),
        random_id=random.randint(1, 1000)
    )
    ask_question(event, vk_api, keyboard, redis_client)


def check_score(event, vk_api, keyboard, redis_client):
    user_id = event.user_id
    total_score = json.loads(redis_client.get(f'{user_id}_score'))
    bot_answer = f"–í–∞—à –æ–±—â–∏–π –∏—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç {total_score} –±–∞–ª–ª(–∞/–æ–≤)"

    vk_api.messages.send(
        user_id=event.user_id,
        message=bot_answer,
        keyboard=keyboard.get_keyboard(),
        random_id=random.randint(1, 1000)
    )


def main(event, vk_api, redis_client):
    keyboard = VkKeyboard(one_time=True)

    keyboard.add_button('–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚ùî', color=VkKeyboardColor.POSITIVE)
    keyboard.add_button('–°–¥–∞—Ç—å—Å—è ‚ùå', color=VkKeyboardColor.NEGATIVE)
    keyboard.add_line()
    keyboard.add_button('–ú–æ–π —Å—á–µ—Ç ‚úçÔ∏è', color=VkKeyboardColor.PRIMARY)

    if event.text == '–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚ùî':
        ask_question(event, vk_api, keyboard, redis_client)
    elif event.text == '–°—Ç–∞—Ä—Ç':
        start(event, vk_api, keyboard)
    elif event.text == '–°–¥–∞—Ç—å—Å—è ‚ùå':
        show_answer(event, vk_api, keyboard, redis_client)
    elif event.text == '–ú–æ–π —Å—á–µ—Ç ‚úçÔ∏è':
        check_score(event, vk_api, keyboard, redis_client)
    else:
        check_answer(event, vk_api, keyboard, redis_client)


if __name__ == "__main__":
    load_dotenv()
    TIMEOUT = 120
    vk_session = vk.VkApi(token=os.getenv("VK_API_TOKEN"))
    chat_id = os.getenv('TG_CHAT_ID')
    api_tg_token = os.getenv('TG_API_BOT')

    vk_api = vk_session.get_api()
    longpoll = VkLongPoll(vk_session)

    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - '
                               '%(message)s', datefmt='%d-%m-%Y %I:%M:%S %p',
                        level=logging.INFO)

    exception_logger.setLevel(logging.ERROR)
    exception_logger.addHandler(TelegramLogsHandler(api_tg_token, chat_id))

    with redis.Redis(
            host=os.getenv("REDIS_HOST"),
            port=os.getenv("REDIS_PORT"),
            db=0,
            password=os.getenv("REDIS_PASSWORD")
    ) as redis_client:
        while True:
            try:
                for event in longpoll.listen():
                    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                        main(event, vk_api, redis_client)
            except Exception:
                exception_logger.exception("–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π")
                sleep(TIMEOUT)
